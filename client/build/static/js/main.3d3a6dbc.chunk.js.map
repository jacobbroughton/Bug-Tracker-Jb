{"version":3,"sources":["reducers/reducer.js","reducers/index.js","store.js","react-auth0-spa.js","utils/history.js","actions/index.js","actions/actions.js","components/NavBar.js","components/textState.js","App.js","serviceWorker.js","index.js"],"names":["counter","state","action","type","rootReducer","combineReducers","reducer","store","createStore","DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","createBrowserHistory","allActions","actions","increment","decrement","NavBar","isAuthenticated","loginWithRedirect","logout","onClick","RevealText","text","maxLength","useState","hidden","setHidden","length","substr","App","useSelector","loading","dispatch","useDispatch","className","Boolean","hostname","match","ReactDOM","render","children","onRedirectCallback","initOptions","setIsAuthenticated","user","setUser","auth0Client","setAuth0","setLoading","popupOpen","setPopupOpen","useEffect","a","async","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","console","log","initAuth0","Provider","value","loginWithPopup","params","error","getIdTokenClaims","getTokenSilently","getTokenWithPopup","domain","config","client_id","clientId","redirect_uri","origin","push","targetUrl","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d3a6dbc.chunk.js","sourcesContent":["const counter = (state = 1, action) => {\n    switch(action.type) {\n        case \"INCREMENT\":\n            return state + 1;\n        case \"DECREMENT\":\n            return state - 1;\n        default: \n            return state;\n    }\n};\n\nexport default counter;","import reducer from \"./reducer.js\";\nimport { combineReducers } from \"redux\";\n\nconst rootReducer = combineReducers({\n    reducer\n});\n\nexport default rootReducer;","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers/index\";\n\n\nconst store = createStore(\n        rootReducer\n    )\n\n    export default store;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n    window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n    children,\n    onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n    ...initOptions\n}) => {\n\n    // Array destructuring\n    // useState creates a single piece of state.\n    // [ the state itself,  function to update state ]\n    const [isAuthenticated, setIsAuthenticated] = useState();\n    const [user, setUser] = useState();\n    const [auth0Client, setAuth0] = useState();\n    const [loading, setLoading] = useState(true);\n    const [popupOpen, setPopupOpen] = useState(false);\n\n\n    // Similar to componentDidMount.\n    // Can be used for side effects such as data fetching, setting up a subscription, or changing the DOM.\n    useEffect(() => {\n        const initAuth0 = async () => {\n            const auth0FromHook = await createAuth0Client(initOptions);\n            setAuth0(auth0FromHook);\n\n            if (window.location.search.includes(\"code=\")) {\n                const { appState } = await auth0FromHook.handleRedirectCallback();\n                onRedirectCallback(appState);\n            }\n\n            const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n            setIsAuthenticated(isAuthenticated);\n\n            if (isAuthenticated) {\n                const user = await auth0FromHook.getUser();\n                setUser(user);\n                console.log(user)\n            }\n\n            setLoading(false);\n        };\n        initAuth0();\n        // eslint-disable-next-line\n    }, []);\n\n\n    // Login Popup logic\n    const loginWithPopup = async (params = {}) => {\n        setPopupOpen(true);\n        try {\n            await auth0Client.loginWithPopup(params);\n        } catch (error) {\n            console.error(error);\n        } finally {\n            setPopupOpen(false);\n        }\n\n        const user = await auth0Client.getUser();\n        setUser(user);\n        setIsAuthenticated(true);\n    }\n\n\n    // Redirect Callback\n    const handleRedirectCallback = async () => {\n        setLoading(true);\n        await auth0Client.handleRedirectCallback();\n        const user = await auth0Client.getUser();\n        setLoading(false);\n        setIsAuthenticated(true);\n        setUser(user);\n    };\n\n    return (\n        <Auth0Context.Provider\n            value={{\n                isAuthenticated,\n                user,\n                loading,\n                popupOpen,\n                loginWithPopup,\n                handleRedirectCallback,\n                getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n                loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n                getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n                getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n                logout: (...p) => auth0Client.logout(...p)\n            }}\n        >\n            {children}\n        </Auth0Context.Provider>\n    );\n}\n","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();","import actions from \"./actions\"\n\nconst allActions = {\n    actions\n};\n\nexport default allActions;","const increment = () => {\n    return {\n        type: \"INCREMENT\"\n    };\n};\n\nconst decrement = () => {\n    return {\n        type: \"DECREMENT\"\n    };\n};\n\nexport default {\n    increment,\n    decrement\n}","import React from \"react\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst NavBar = () => {\n    const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\n\n    return (\n        <div>\n            {!isAuthenticated && (\n                <button onClick={() => loginWithRedirect({})}>Log In</button>\n            )}\n\n            {isAuthenticated && <button onClick={() => logout()}>Log Out</button>}\n        </div>\n\n    )\n}\n\nexport default NavBar;\n","import React, { useEffect, useState } from 'react';\n\nfunction RevealText({ text, maxLength }) {\n    const [hidden, setHidden] = useState(true);\n    if (text.length <= maxLength) {\n        return <span>{text} </span>\n    }\n\n    return (\n        <span>\n            {hidden ? text.substr(0, maxLength) : text + `\\n`}\n            {hidden ? (\n                <a onClick={() => setHidden(false)}> Read more </a>\n            ) : (\n                    <a onClick={() => setHidden(true)}>Read Less</a>\n                )}\n        </span>\n    )\n}\n\nexport default RevealText;","\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\"\nimport allActions from \"./actions/index\";\nimport NavBar from \"./components/NavBar\";\nimport { useAuth0 } from \"./react-auth0-spa\";\nimport RevealText from \"./components/textState\";\nimport './App.css';\n\nconst App = () => {\n\n  const counter = useSelector(state => state.reducer);\n  const { loading } = useAuth0();\n\n  const dispatch = useDispatch();\n\n\n  if (loading) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <h1>Hello World</h1>\n      <h1>Counter: {counter}</h1>\n      <button onClick={() => dispatch(allActions.actions.increment())}>Add!</button>\n      <button onClick={() => dispatch(allActions.actions.decrement())}>Decrease!</button>\n      <RevealText maxLength={15} text=\"howdy howdy howdy howdy howdy howdy howdy howdy howdy howdy howdy howdy howdy \"/>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport rootReducer from \"./reducers/index\"\n\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport config from \"./auth_config.json\";\nimport history from \"./utils/history\";\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// A function that routes the user to the right place after login.\nconst onRedirectCallback = appState => {\n    history.push(\n        appState && appState.targetUrl\n            ? appState.targetUrl\n            : window.location.pathname\n    )\n}\n\nReactDOM.render(\n    <Auth0Provider\n        domain={config.domain}\n        client_id={config.clientId}\n        redirect_uri={window.location.origin}\n        onRedirectCallback={onRedirectCallback}\n    >\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </Auth0Provider>\n\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}